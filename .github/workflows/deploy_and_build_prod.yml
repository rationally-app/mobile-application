name: Create Release
on:
  push:
    tags:
      - "prod-[1-9]+.[0-9]+.[0-9]+" # Push events to matching prod-*, i.e.prod-20.15.10

# Ensure only a single job or workflow using the same concurrency group will run at a time
# When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress,
# the queued job or workflow will be pending.
concurrency:
  group: ${{ github.ref }} # The branch or tag ref that triggered the workflow run.

jobs:
  markdown_lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Check Markdown Lint
        run: npm run markdown:lint
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Get Latest Binary Version # Binary Version will be x.x.x based on the latest tag
        id: latestBinaryVersion
        run: |
          # Release tag finds the latest tag in the tree branch - i.e. prod-x.x.x
          RELEASE_TAG=$(echo $(git describe --tags --abbrev=0))
          # Using param substitution, we output x.x.x instead
          echo "::set-output name=version::${RELEASE_TAG#*-}"
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Typecheck
        run: npx --no-install tsc --noEmit
      - name: Check Lint
        run: npm run lint
      - name: Set Timezone to +8 (Ubuntu)
        run: sudo timedatectl set-timezone Asia/Singapore
      - name: Test
        run: npm run test -- --coverage
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ steps.latestBinaryVersion.outputs.version }}
          DOMAIN_FORMAT: ${{ secrets.TEST_DOMAIN_FORMAT }}
          PROJECT_ID: ${{ secrets.EXPO_PROJECT_ID }}
  deploy_prod:
    name: Deploy To Production
    needs: test
    runs-on: ubuntu-latest
    outputs:
      releaseChannel: ${{ steps.releaseChannel.outputs.releaseChannel }}
      latestBinaryVersion: ${{ steps.latestBinaryVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch Tags
        run: |
          git fetch --prune --unshallow --tags -f
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: expo/expo-github-action@v7
        with:
          eas-version: latest
          expo-version: latest
          packager: npm
          token: ${{ secrets.EXPO_TOKEN }}
          eas-cache: true
          expo-cache: true
      - uses: rlespinasse/github-slug-action@v3.x
      - name: Generate Release Channel # Release Channels are named prod-<Major Release>, i.e. prod-1, prod-3
        id: releaseChannel
        run: |
          RELEASE_CHANNEL=$(echo ${{ env.GITHUB_REF_SLUG }} | sed -r 's/\.[0-9]+\.[0-9]+$//')
          echo "::set-output name=releaseChannel::$RELEASE_CHANNEL"
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Get Latest Binary Version # Binary Version will be x.x.x based on the latest tag
        id: latestBinaryVersion
        run: |
          # Release tag finds the lastest tag in the tree branch - i.e. prod-x.x.x
          RELEASE_TAG=$(echo $(git describe --tags --abbrev=0))
          # Using param substitution, we output x.x.x instead
          echo "::set-output name=version::${RELEASE_TAG#*-}"
      - name: Echo Version Details
        run: |
          echo Build number is $GITHUB_RUN_NUMBER
          echo Latest release is ${{ steps.latestBinaryVersion.outputs.version }}
      - name: Get commit message
        id: getCommitMessage
        run: |
          MSG=$(git log --format=%B -n 1 ${{github.event.after}})
          echo "::set-output name=commit_message::${MSG}"
      - name: Eas Update Channel
        env:
          NODE_OPTIONS: --max_old_space_size=7168
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ steps.latestBinaryVersion.outputs.version }}
          DOMAIN_FORMAT: ${{ secrets.TEST_DOMAIN_FORMAT }}
          PROJECT_ID: ${{ secrets.EXPO_PROJECT_ID }}
        run: eas update --non-interactive --branch ${{ steps.releaseChannel.outputs.releaseChannel }} --message "${{ steps.getCommitMessage.outputs.commit_message }}"
  # unlike stg and pr, the build step is combined in prod because APP_BUILD_VERSION uses the github run number, which is a number tied to the workflow. separating it will reset the current run number
  eas_build:
    name: Build Prod
    runs-on: ubuntu-latest
    outputs:
      latestBinaryVersion: ${{ steps.latestBinaryVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch Tags
        run: |
          git fetch --prune --unshallow --tags -f
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: expo/expo-github-action@v7
        with:
          eas-version: latest
          expo-version: latest
          packager: npm
          token: ${{ secrets.EXPO_TOKEN }}
          eas-cache: true
          expo-cache: true
      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci --legacy-peer-deps
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Get Latest Binary Version # Binary Version will be x.x.x based on the latest tag
        id: latestBinaryVersion
        run: |
          # Release tag finds the latest tag in the tree branch - i.e. prod-x.x.x
          RELEASE_TAG=$(echo $(git describe --tags --abbrev=0))
          # Using param substitution, we output x.x.x instead
          echo "::set-output name=version::${RELEASE_TAG#*-}"
      - name: Echo Version Details
        run: |
          echo Build number is $GITHUB_RUN_NUMBER
          echo Latest release is ${{ steps.latestBinaryVersion.outputs.version }}
      - name: Setup eas json
        env:
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ steps.latestBinaryVersion.outputs.version }}
        run: |
          .github/scripts/create-profile.sh ${{ steps.releaseChannel.outputs.releaseChannel }}
          .github/scripts/set-versions.sh ${{ steps.releaseChannel.outputs.releaseChannel }} $APP_BUILD_VERSION $APP_BINARY_VERSION
          cat eas.json
      - name: Eas Build
        env:
          # these envs are all not really used because EAS stores its own set of secrets. 
          # It's just, unfortunately, our app.config.js is coded to throw errors when these envs are missing
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DOMAIN_FORMAT: ${{ secrets.TEST_DOMAIN_FORMAT }}
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ steps.latestBinaryVersion.outputs.version }}
          PROJECT_ID: ${{ secrets.EXPO_PROJECT_ID }}
        run: |
          eas build --profile ${{ steps.releaseChannel.outputs.releaseChannel }} --non-interactive --platform all > buildLog.txt
          cat buildLog.txt
  create_release:
    name: Create Release
    needs: deploy_prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Fetch Tags
        run: git fetch --prune --unshallow --tags -f
      - uses: rlespinasse/github-slug-action@v3.x
      - name: Set tag variables
        id: setTags
        run: |
          MATCHING_TAGS=$(git tag --sort=-version:refname | grep -m2 -E '^prod-[0-9]+\.[0-9]+\.[0-9]+$')
          echo ::set-output name=latestTag::$(echo "${MATCHING_TAGS}" | head -n1)
          echo ::set-output name=previousTag::$(echo "${MATCHING_TAGS}" | tail -n1)
      - name: Generate Changelog
        id: changelog
        uses: metcalfc/changelog-generator@v1.0.0
        with:
          myToken: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
          head-ref: ${{ steps.setTags.outputs.latestTag }}
          base-ref: ${{ steps.setTags.outputs.previousTag }}
      - name: Creating Release
        uses: ncipollo/release-action@v1
        with:
          body: |
            Changes in this Release: 
            ${{ steps.changelog.outputs.changelog }}
          token: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
          name: Release ${{ env.GITHUB_REF_SLUG }}
          allowUpdates: true
