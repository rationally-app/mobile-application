name: Build Branch Preview

on: [workflow_dispatch]

# Ensure only a single job or workflow using the same concurrency group will run at a time
# When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress,
# the queued job or workflow will be pending.
concurrency:
  group: ${{ github.ref }}-build-branch-preview # The branch or tag ref that triggered the workflow run.

jobs:
  pr_title_lint:
    name: PR Title Lint
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 5

    steps:
      - name: check if PR title follows conventional commits specs
        uses: amannn/action-semantic-pull-request@v3.4.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          # using github token for external/dependabot PR,
          # personal access tokens in secrets will not be accessible in
          # pipeline for external user PRs
  markdown_lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 16.x
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Check Markdown Lint
        run: npm run markdown:lint
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 16.x
      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci --legacy-peer-deps
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Typecheck
        run: npx --no-install tsc --noEmit
      - name: Check Lint
        run: npm run lint
      - name: Set Timezone to +8 (Ubuntu)
        run: sudo timedatectl set-timezone Asia/Singapore
      - name: Test
        run: npm run test -- --coverage
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: "dev"
          DOMAIN_FORMAT: ${{ secrets.TEST_DOMAIN_FORMAT }}
          PROJECT_ID: ${{ secrets.EXPO_TEST_PROJECT_ID }}
          OWNER: ${{ secrets.EXPO_TEST_OWNER }}
  build_branch_preview:
    name: Build Branch Preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch Tags
        run: |
          git fetch --prune --unshallow --tags -f
      - uses: actions/setup-node@v4
        with:
          node-version: 16.x
      - uses: expo/expo-github-action@v8
        with:
          eas-version: 3.12.0
          expo-version: 6.3.9
          packager: npm
          token: ${{ secrets.EXPO_TOKEN }}
          eas-cache: true
          expo-cache: true
      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Packages
        run: |
          npm config set //npm.pkg.github.com/:_authToken $NPM_TOKEN
          npm ci --legacy-peer-deps
        env:
          NPM_TOKEN: ${{ secrets.GH_TOKEN_SUPPLYALLY_BOT }}
      - name: Get Latest Binary Version # Binary Version will be x.x.x based on the latest tag
        run: |
          # Release tag finds the latest tag in the tree branch - i.e. prod-x.x.x
          RELEASE_TAG=$(echo $(git describe --tags --abbrev=0))
          # Using param substitution, we output x.x.x instead
          echo "LATEST_BINARY_VERSION=${RELEASE_TAG#*-}" >> "$GITHUB_ENV"
      - name: Echo Version Details
        run: |
          echo Build number is $GITHUB_RUN_NUMBER
          echo Latest release is ${{ env.LATEST_BINARY_VERSION }}
      - name: Setup ci files json
        env:
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ env.LATEST_BINARY_VERSION }}
        run: |
          .github/scripts/inject-token.sh
          .github/scripts/set-versions.sh preview $APP_BUILD_VERSION $APP_BINARY_VERSION
          cat eas.json
      - name: Eas Build
        env:
          # these envs are all not really used because EAS stores its own set of secrets.
          # It's just, unfortunately, our app.config.js is coded to throw errors when these envs are missing
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DOMAIN_FORMAT: ${{ secrets.TEST_DOMAIN_FORMAT }}
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ env.LATEST_BINARY_VERSION }}
          PROJECT_ID: ${{ secrets.EXPO_TEST_PROJECT_ID }}
          OWNER: ${{ secrets.EXPO_TEST_OWNER }}
        run: |
          eas build --profile preview --non-interactive --platform all > buildLog.txt
          cat buildLog.txt
